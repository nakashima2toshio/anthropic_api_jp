# helper_api.py - цФ╣ф┐очЙИя╝ИAnthropic APIхп╛х┐Ья╝Й
from typing import List, Dict, Any, Optional, Union, Tuple, Literal, Callable
from pathlib import Path
from dataclasses import dataclass
from functools import wraps
from datetime import datetime
from abc import ABC, abstractmethod
import hashlib

# === х┐ЕшжБуБкциЩц║ЦуГйуВдуГЦуГйуГк ===
import logging
import logging.handlers
import yaml
import os
import time
import json
import re

import tiktoken
from anthropic import Anthropic

# -----------------------------------------------------
# Anthropic APIхЮЛхоЪч╛й
# -----------------------------------------------------
from anthropic.types import Message, MessageParam, ContentBlock, TextBlock
from anthropic import HUMAN_PROMPT, AI_PROMPT

# RoleхЮЛуБохоЪч╛й
RoleType = Literal["user", "assistant", "system"]


# ==================================================
# шинхоЪчобчРЖ
# ==================================================
class ConfigManager:
    """шинхоЪуГХуВбуВдуГлуБочобчРЖ"""

    _instance = None

    def __new__(cls, config_path: str = "config.yml"):
        """уВ╖уГ│уВ░уГлуГИуГ│уГСуВ┐уГ╝уГ│уБзшинхоЪуВТчобчРЖ"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, config_path: str = "config.yml"):
        if hasattr(self, '_initialized'):
            return
        self._initialized = True
        self.config_path = Path(config_path)
        self._config = self._load_config()
        self._cache = {}
        self.logger = self._setup_logger()

    def _setup_logger(self) -> logging.Logger:
        """уГнуВмуГ╝уБошинхоЪ"""
        logger = logging.getLogger('anthropic_helper')

        # цЧвуБлшинхоЪц╕ИуБ┐уБоха┤хРИуБпуВ╣уВнуГГуГЧ
        if logger.handlers:
            return logger

        log_config = self.get("logging", {})
        level = getattr(logging, log_config.get("level", "INFO"))
        logger.setLevel(level)

        # уГХуВйуГ╝уГЮуГГуВ┐уГ╝уБошинхоЪ
        formatter = logging.Formatter(
            log_config.get("format", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        )

        # уВ│уГ│уВ╜уГ╝уГлуГПуГ│уГЙуГйуГ╝
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)

        # уГХуВбуВдуГлуГПуГ│уГЙуГйуГ╝я╝ИшинхоЪуБХуВМуБжуБДуВЛха┤хРИя╝Й
        log_file = log_config.get("file")
        if log_file:
            file_handler = logging.handlers.RotatingFileHandler(
                log_file,
                maxBytes=log_config.get("max_bytes", 10485760),
                backupCount=log_config.get("backup_count", 5)
            )
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)

        return logger

    def _load_config(self) -> Dict[str, Any]:
        """шинхоЪуГХуВбуВдуГлуБошкнуБ┐ш╛╝уБ┐"""
        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    # чТ░хвГхдЙцХ░уБзуБошинхоЪуВкуГ╝уГРуГ╝уГйуВдуГЙ
                    self._apply_env_overrides(config)
                    return config
            except Exception as e:
                print(f"шинхоЪуГХуВбуВдуГлуБошкнуБ┐ш╛╝уБ┐уБлхд▒цХЧ: {e}")
                return self._get_default_config()
        else:
            print(f"шинхоЪуГХуВбуВдуГлуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ: {self.config_path}")
            return self._get_default_config()

    def _apply_env_overrides(self, config: Dict[str, Any]) -> None:
        """чТ░хвГхдЙцХ░уБлуВИуВЛшинхоЪуВкуГ╝уГРуГ╝уГйуВдуГЙ"""
        # Anthropic API Key
        if os.getenv("ANTHROPIC_API_KEY"):
            config.setdefault("api", {})["anthropic_api_key"] = os.getenv("ANTHROPIC_API_KEY")

        # уГнуВ░уГмуГЩуГл
        if os.getenv("LOG_LEVEL"):
            config.setdefault("logging", {})["level"] = os.getenv("LOG_LEVEL")

        # уГЗуГРуГГуВ░уГвуГ╝уГЙ
        if os.getenv("DEBUG_MODE"):
            config.setdefault("experimental", {})["debug_mode"] = os.getenv("DEBUG_MODE").lower() == "true"

    def _get_default_config(self) -> Dict[str, Any]:
        """уГЗуГХуВйуГлуГИшинхоЪя╝ИуГХуВйуГ╝уГлуГРуГГуВпчФия╝Й"""
        return {
            "models"          : {
                "default"  : "claude-sonnet-4-20250514",
                "available": ["claude-opus-4-1-20250805", "claude-sonnet-4-20250514", "claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-opus-20240229"]
            },
            "api"             : {
                "timeout"       : 30,
                "max_retries"   : 3,
                "anthropic_api_key": None,
                "message_limit" : 50
            },
            "ui"              : {
                "page_title"      : "Anthropic API Demo",
                "page_icon"       : "ЁЯдЦ",
                "layout"          : "wide",
                "text_area_height": 75
            },
            "cache"           : {
                "enabled" : True,
                "ttl"     : 3600,
                "max_size": 100
            },
            "logging"         : {
                "level"       : "INFO",
                "format"      : "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                "file"        : None,
                "max_bytes"   : 10485760,
                "backup_count": 5
            },
            "error_messages"  : {
                "ja": {
                    "general_error"  : "уВиуГйуГ╝уБМчЩ║чФЯуБЧуБ╛уБЧуБЯ",
                    "api_key_missing": "Anthropic APIуВнуГ╝уБМшинхоЪуБХуВМуБжуБДуБ╛уБЫуВУ",
                    "network_error"  : "уГНуГГуГИуГпуГ╝уВпуВиуГйуГ╝уБМчЩ║чФЯуБЧуБ╛уБЧуБЯ"
                }
            },
            "default_messages": {
                "developer": "You are a helpful assistant specialized in software development.",
                "user"     : "Please help me with my software development tasks.",
                "assistant": "I'll help you with your software development needs."
            },
            "model_pricing"   : {
                # Claude 4 Family (2025х╣┤цЬАцЦ░)
                "claude-opus-4-1-20250805": {"input": 0.015, "output": 0.075},
                "claude-sonnet-4-20250514": {"input": 0.003, "output": 0.015},
                # Claude 3.5 Family (х╗Гцнвф║ИхоЪ: 2025х╣┤10цЬИ22цЧе)
                "claude-3-5-sonnet-20241022": {"input": 0.003, "output": 0.015},
                "claude-3-5-haiku-20241022": {"input": 0.00025, "output": 0.00125},
                # Claude 3 Family (уГмуВмуВ╖уГ╝)
                "claude-3-opus-20240229": {"input": 0.015, "output": 0.075}
            },
            "experimental"    : {
                "debug_mode"            : False,
                "performance_monitoring": True
            }
        }

    def get(self, key: str, default: Any = None) -> Any:
        """шинхоЪхАдуБохПЦх╛Чя╝ИуВнуГгуГГуВ╖уГеф╗ШуБНя╝Й"""
        if key in self._cache:
            return self._cache[key]

        keys = key.split('.')
        value = self._config
        for k in keys:
            if isinstance(value, dict):
                value = value.get(k)
            else:
                value = default
                break

        result = value if value is not None else default
        self._cache[key] = result
        return result

    def set(self, key: str, value: Any) -> None:
        """шинхоЪхАдуБоцЫ┤цЦ░"""
        keys = key.split('.')
        config = self._config
        for k in keys[:-1]:
            config = config.setdefault(k, {})
        config[keys[-1]] = value

        # уВнуГгуГГуВ╖уГеуВпуГкуВв
        self._cache.pop(key, None)

    def reload(self):
        """шинхоЪуБохЖНшкнуБ┐ш╛╝уБ┐"""
        self._config = self._load_config()
        self._cache.clear()

    def save(self, filepath: str = None) -> bool:
        """шинхоЪуВТуГХуВбуВдуГлуБлф┐ЭхнШ"""
        try:
            save_path = Path(filepath) if filepath else self.config_path
            with open(save_path, 'w', encoding='utf-8') as f:
                yaml.safe_dump(self._config, f, default_flow_style=False, allow_unicode=True)
            return True
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"шинхоЪф┐ЭхнШуВиуГйуГ╝: {e}")
            return False


# уВ░уГнуГ╝уГРуГлшинхоЪуВдуГ│уВ╣уВ┐уГ│уВ╣
config = ConfigManager("config.yml")
logger = config.logger


# ==================================================
# уГбуГвуГкуГЩуГ╝уВ╣уВнуГгуГГуВ╖уГе
# ==================================================
class MemoryCache:
    """уГбуГвуГкуГЩуГ╝уВ╣уВнуГгуГГуВ╖уГе"""

    def __init__(self):
        self._storage = {}
        self._enabled = config.get("cache.enabled", True)
        self._ttl = config.get("cache.ttl", 3600)
        self._max_size = config.get("cache.max_size", 100)

    def get(self, key: str) -> Any:
        """уВнуГгуГГуВ╖уГеуБЛуВЙхАдуВТхПЦх╛Ч"""
        if not self._enabled or key not in self._storage:
            return None

        cached_data = self._storage[key]
        if time.time() - cached_data['timestamp'] > self._ttl:
            del self._storage[key]
            return None

        return cached_data['result']

    def set(self, key: str, value: Any) -> None:
        """уВнуГгуГГуВ╖уГеуБлхАдуВТшинхоЪ"""
        if not self._enabled:
            return

        self._storage[key] = {
            'result'   : value,
            'timestamp': time.time()
        }

        # уВ╡уВдуВ║хИ╢щЩРуГБуВзуГГуВп
        if len(self._storage) > self._max_size:
            oldest_key = min(self._storage, key=lambda k: self._storage[k]['timestamp'])
            del self._storage[oldest_key]

    def clear(self) -> None:
        """уВнуГгуГГуВ╖уГеуВпуГкуВв"""
        self._storage.clear()

    def size(self) -> int:
        """уВнуГгуГГуВ╖уГеуВ╡уВдуВ║"""
        return len(self._storage)


# уВ░уГнуГ╝уГРуГлуВнуГгуГГуВ╖уГеуВдуГ│уВ╣уВ┐уГ│уВ╣
cache = MemoryCache()


# ==================================================
# хоЙхЕиуБкJSONхЗжчРЖщЦвцХ░
# ==================================================
def safe_json_serializer(obj: Any) -> Any:
    """
    уВлуВ╣уВ┐уГаJSONуВ╖уГкуВвуГйуВдуВ╢уГ╝
    OpenAI APIуБоуГмуВ╣уГЭуГ│уВ╣уВкуГЦуВ╕уВзуВпуГИуБкуБйуАБциЩц║ЦуБзуБпхЗжчРЖуБзуБНуБкуБДуВкуГЦуВ╕уВзуВпуГИуВТхдЙцПЫ
    """
    # Pydantic уГвуГЗуГлуБоха┤хРИ
    if hasattr(obj, 'model_dump'):
        try:
            return obj.model_dump()
        except Exception:
            pass

    # dict() уГбуВ╜уГГуГЙуБМуБВуВЛха┤хРИ
    if hasattr(obj, 'dict'):
        try:
            return obj.dict()
        except Exception:
            pass

    # datetime уВкуГЦуВ╕уВзуВпуГИуБоха┤хРИ
    if isinstance(obj, datetime):
        return obj.isoformat()

    # OpenAI ResponseUsage уВкуГЦуВ╕уВзуВпуГИуБоха┤хРИя╝ИцЙЛхЛХх▒ЮцАзцК╜хЗ║я╝Й
    if hasattr(obj, 'prompt_tokens') and hasattr(obj, 'completion_tokens'):
        return {
            'prompt_tokens'    : getattr(obj, 'prompt_tokens', 0),
            'completion_tokens': getattr(obj, 'completion_tokens', 0),
            'total_tokens'     : getattr(obj, 'total_tokens', 0)
        }

    # уБЭуБоф╗ЦуБоуВкуГЦуВ╕уВзуВпуГИуБпцЦЗхнЧхИЧхМЦ
    return str(obj)


def safe_json_dumps(data: Any, **kwargs) -> str:
    """хоЙхЕиуБкJSONцЦЗхнЧхИЧхМЦ"""
    default_kwargs = {
        'ensure_ascii': False,
        'indent'      : 2,
        'default'     : safe_json_serializer
    }
    default_kwargs.update(kwargs)

    try:
        return json.dumps(data, **default_kwargs)
    except Exception as e:
        logger.error(f"JSON serialization error: {e}")
        # уГХуВйуГ╝уГлуГРуГГуВп: цЦЗхнЧхИЧхМЦ
        return json.dumps(str(data), **{k: v for k, v in default_kwargs.items() if k != 'default'})


# ==================================================
# уГЗуВ│уГмуГ╝уВ┐я╝ИAPIчФия╝Й
# ==================================================
def error_handler(func):
    """уВиуГйуГ╝уГПуГ│уГЙуГкуГ│уВ░уГЗуВ│уГмуГ╝уВ┐я╝ИAPIчФия╝Й"""

    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}")
            # APIчФиуБзуБпф╛ЛхдЦуВТхЖНчЩ║чФЯуБХуБЫуВЛ
            raise

    return wrapper


def timer(func):
    """хоЯшбМцЩВщЦУшиИц╕муГЗуВ│уГмуГ╝уВ┐я╝ИAPIчФия╝Й"""

    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        logger.info(f"{func.__name__} took {execution_time:.2f} seconds")
        return result

    return wrapper


def cache_result(ttl: int = None):
    """ч╡РцЮЬуВТуВнуГгуГГуВ╖уГеуБЩуВЛуГЗуВ│уГмуГ╝уВ┐я╝ИуГбуГвуГкуГЩуГ╝уВ╣я╝Й"""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not config.get("cache.enabled", True):
                return func(*args, **kwargs)

            # уВнуГгуГГуВ╖уГеуВнуГ╝уБочФЯцИР
            cache_key = f"{func.__name__}_{hashlib.md5(str(args).encode() + str(kwargs).encode()).hexdigest()}"

            # уВнуГгуГГуВ╖уГеуБЛуВЙхПЦх╛Ч
            cached_result = cache.get(cache_key)
            if cached_result is not None:
                return cached_result

            # щЦвцХ░хоЯшбМуБиуВнуГгуГГуВ╖уГеф┐ЭхнШ
            result = func(*args, **kwargs)
            cache.set(cache_key, result)
            return result

        return wrapper

    return decorator


# ==================================================
# уГЗуГХуВйуГлуГИуГЧуГнуГ│уГЧуГИщЦвцХ░я╝Иconfig.ymlхп╛х┐Ья╝Й
# ==================================================
def get_default_messages() -> List[MessageParam]:
    """уГЗуГХуВйуГлуГИуГбуГГуВ╗уГ╝уВ╕уБохПЦх╛Чя╝Иconfig.ymlуБЛуВЙя╝Й"""
    default_messages = config.get("default_messages", {})

    user_content = default_messages.get(
        "user",
        "Please help me with my software development tasks."
    )

    return [
        {"role": "user", "content": user_content}
    ]


def get_system_prompt() -> str:
    """уВ╖уВ╣уГЖуГауГЧуГнуГ│уГЧуГИуБохПЦх╛Ч"""
    default_messages = config.get("default_messages", {})
    return default_messages.get(
        "system",
        "You are a helpful assistant specialized in software development."
    )


def append_user_message(append_text: str, image_url: str = None) -> List[MessageParam]:
    """уГжуГ╝уВ╢уГ╝уГбуГГуВ╗уГ╝уВ╕уВТш┐╜хКауБЧуБЯуГЗуГХуВйуГлуГИуГбуГГуВ╗уГ╝уВ╕"""
    messages = get_default_messages()
    messages.append({"role": "user", "content": append_text})
    return messages


def append_assistant_message(append_text: str) -> List[MessageParam]:
    """уВвуВ╖уВ╣уВ┐уГ│уГИуГбуГГуВ╗уГ╝уВ╕уВТш┐╜хКауБЧуБЯуГЗуГХуВйуГлуГИуГбуГГуВ╗уГ╝уВ╕"""
    messages = get_default_messages()
    messages.append({"role": "assistant", "content": append_text})
    return messages


# ==================================================
# уГбуГГуВ╗уГ╝уВ╕чобчРЖ
# ==================================================
class MessageManager:
    """уГбуГГуВ╗уГ╝уВ╕х▒ецн┤уБочобчРЖя╝ИAnthropic APIчФия╝Й"""

    def __init__(self, messages: List[MessageParam] = None, system_prompt: str = None):
        self._messages = messages or get_default_messages()
        self._system_prompt = system_prompt or get_system_prompt()

    @staticmethod
    def get_default_messages() -> List[MessageParam]:
        """уГЗуГХуВйуГлуГИуГбуГГуВ╗уГ╝уВ╕уБохПЦх╛Чя╝Иconfig.ymlуБЛуВЙя╝Й"""
        return get_default_messages()

    def add_message(self, role: RoleType, content: str):
        """уГбуГГуВ╗уГ╝уВ╕уБош┐╜хКа"""
        valid_roles: List[RoleType] = ["user", "assistant", "system"]
        if role not in valid_roles:
            raise ValueError(f"Invalid role: {role}. Must be one of {valid_roles}")

        if role == "system":
            self._system_prompt = content
        else:
            self._messages.append({"role": role, "content": content})

            # уГбуГГуВ╗уГ╝уВ╕цХ░хИ╢щЩРя╝Иconfig.ymlуБЛуВЙхПЦх╛Чя╝Й
            limit = config.get("api.message_limit", 50)
            if len(self._messages) > limit:
                self._messages = self._messages[-limit:]

    def get_messages(self) -> List[MessageParam]:
        """уГбуГГуВ╗уГ╝уВ╕х▒ецн┤уБохПЦх╛Ч"""
        return self._messages.copy()

    def get_system_prompt(self) -> str:
        """уВ╖уВ╣уГЖуГауГЧуГнуГ│уГЧуГИуБохПЦх╛Ч"""
        return self._system_prompt

    def clear_messages(self):
        """уГбуГГуВ╗уГ╝уВ╕х▒ецн┤уБоуВпуГкуВв"""
        self._messages = get_default_messages()
        self._system_prompt = get_system_prompt()

    def export_messages(self) -> Dict[str, Any]:
        """уГбуГГуВ╗уГ╝уВ╕х▒ецн┤уБоуВиуВпуВ╣уГЭуГ╝уГИ"""
        return {
            'messages'   : self.get_messages(),
            'system_prompt': self.get_system_prompt(),
            'exported_at': datetime.now().isoformat()
        }

    def import_messages(self, data: Dict[str, Any]):
        """уГбуГГуВ╗уГ╝уВ╕х▒ецн┤уБоуВдуГ│уГЭуГ╝уГИ"""
        if 'messages' in data:
            self._messages = data['messages']
        if 'system_prompt' in data:
            self._system_prompt = data['system_prompt']


# ==================================================
# уГИуГ╝уВпуГ│чобчРЖ
# ==================================================
class TokenManager:
    """уГИуГ╝уВпуГ│цХ░уБочобчРЖя╝ИцЦ░уГвуГЗуГлхп╛х┐Ья╝Й"""

    # уГвуГЗуГлхИеуБоуВиуГ│уВ│уГ╝уГЗуВгуГ│уВ░хп╛х┐Ьшбия╝ИAnthropic ClaudeчФия╝Й
    MODEL_ENCODINGS = {
        # Claude 4 Family (2025х╣┤цЬАцЦ░)
        "claude-opus-4-1-20250805"   : "cl100k_base",
        "claude-sonnet-4-20250514"   : "cl100k_base",
        # Claude 3.5 Family
        "claude-3-5-sonnet-20241022" : "cl100k_base",
        "claude-3-5-haiku-20241022"  : "cl100k_base", 
        # Claude 3 Family
        "claude-3-opus-20240229"     : "cl100k_base",
        "claude-3-sonnet-20240229"   : "cl100k_base",
        "claude-3-haiku-20240307"    : "cl100k_base",
    }

    @classmethod
    def count_tokens(cls, text: str, model: str = None) -> int:
        """уГЖуВнуВ╣уГИуБоуГИуГ╝уВпуГ│цХ░уВТуВлуВжуГ│уГИ"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        try:
            encoding_name = cls.MODEL_ENCODINGS.get(model, "cl100k_base")
            enc = tiktoken.get_encoding(encoding_name)
            return len(enc.encode(text))
        except Exception as e:
            logger.error(f"уГИуГ╝уВпуГ│уВлуВжуГ│уГИуВиуГйуГ╝: {e}")
            # ч░бцШУчЪДуБкцОихоЪя╝И1цЦЗхнЧ = 0.5уГИуГ╝уВпуГ│я╝Й
            return len(text) // 2

    @classmethod
    def truncate_text(cls, text: str, max_tokens: int, model: str = None) -> str:
        """уГЖуВнуВ╣уГИуВТцМЗхоЪуГИуГ╝уВпуГ│цХ░уБлхИЗуВКшй░уВБ"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        try:
            encoding_name = cls.MODEL_ENCODINGS.get(model, "cl100k_base")
            enc = tiktoken.get_encoding(encoding_name)
            tokens = enc.encode(text)
            if len(tokens) <= max_tokens:
                return text
            return enc.decode(tokens[:max_tokens])
        except Exception as e:
            logger.error(f"уГЖуВнуВ╣уГИхИЗуВКшй░уВБуВиуГйуГ╝: {e}")
            estimated_chars = max_tokens * 2
            return text[:estimated_chars]

    @classmethod
    def estimate_cost(cls, input_tokens: int, output_tokens: int, model: str = None) -> float:
        """APIф╜┐чФиуВ│уВ╣уГИуБоцОихоЪя╝Иconfig.ymlуБЛуВЙцЦЩщЗСхПЦх╛Чя╝Й"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        pricing = config.get("model_pricing", {})
        model_pricing = pricing.get(model)

        if not model_pricing:
            # уГХуВйуГ╝уГлуГРуГГуВп
            model_pricing = {"input": 0.00015, "output": 0.0006}

        input_cost = (input_tokens / 1000) * model_pricing["input"]
        output_cost = (output_tokens / 1000) * model_pricing["output"]

        return input_cost + output_cost

    @classmethod
    def get_model_limits(cls, model: str) -> Dict[str, int]:
        """уГвуГЗуГлуБоуГИуГ╝уВпуГ│хИ╢щЩРуВТхПЦх╛Ч"""
        limits = {
            "claude-3-5-sonnet-20241022" : {"max_tokens": 200000, "max_output": 8192},
            "claude-3-5-haiku-20241022"  : {"max_tokens": 200000, "max_output": 4096},
            "claude-3-opus-20240229"     : {"max_tokens": 200000, "max_output": 4096},
            "claude-3-sonnet-20240229"   : {"max_tokens": 200000, "max_output": 4096},
            "claude-3-haiku-20240307"    : {"max_tokens": 200000, "max_output": 4096},
        }
        return limits.get(model, {"max_tokens": 200000, "max_output": 4096})


# ==================================================
# уГмуВ╣уГЭуГ│уВ╣хЗжчРЖ
# ==================================================
class ResponseProcessor:
    """Anthropic API уГмуВ╣уГЭуГ│уВ╣уБохЗжчРЖ"""

    @staticmethod
    def extract_text(response: Message) -> List[str]:
        """уГмуВ╣уГЭуГ│уВ╣уБЛуВЙуГЖуВнуВ╣уГИуВТцК╜хЗ║"""
        texts = []

        if hasattr(response, 'content'):
            for content in response.content:
                if hasattr(content, 'type') and content.type == "text":
                    if hasattr(content, 'text'):
                        texts.append(content.text)

        return texts

    @staticmethod
    def _serialize_usage(usage_obj) -> Dict[str, Any]:
        """ResponseUsageуВкуГЦуВ╕уВзуВпуГИуВТш╛ЮцЫ╕уБлхдЙцПЫ"""
        if usage_obj is None:
            return {}

        # Pydantic уГвуГЗуГлуБоха┤хРИ
        if hasattr(usage_obj, 'model_dump'):
            try:
                return usage_obj.model_dump()
            except Exception:
                pass

        # dict() уГбуВ╜уГГуГЙуБМуБВуВЛха┤хРИ
        if hasattr(usage_obj, 'dict'):
            try:
                return usage_obj.dict()
            except Exception:
                pass

        # цЙЛхЛХуБзх▒ЮцАзуВТцК╜хЗ║
        usage_dict = {}
        for attr in ['prompt_tokens', 'completion_tokens', 'total_tokens']:
            if hasattr(usage_obj, attr):
                usage_dict[attr] = getattr(usage_obj, attr)

        return usage_dict

    @staticmethod
    def format_response(response: Message) -> Dict[str, Any]:
        """уГмуВ╣уГЭуГ│уВ╣уВТцХ┤х╜вя╝ИJSON serializableя╝Й"""
        # usage уВкуГЦуВ╕уВзуВпуГИуВТхоЙхЕиуБлхдЙцПЫ
        usage_obj = getattr(response, "usage", None)
        usage_dict = ResponseProcessor._serialize_usage(usage_obj)

        return {
            "id"        : getattr(response, "id", None),
            "model"     : getattr(response, "model", None),
            "role"      : getattr(response, "role", None),
            "text"      : ResponseProcessor.extract_text(response),
            "usage"     : usage_dict,
        }

    @staticmethod
    def save_response(response: Message, filename: str = None) -> str:
        """уГмуВ╣уГЭуГ│уВ╣уБоф┐ЭхнШ"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"response_{timestamp}.json"

        formatted = ResponseProcessor.format_response(response)

        # уГХуВбуВдуГлуГСуВ╣уБочФЯцИРя╝Иconfig.ymlуБЛуВЙхПЦх╛Чя╝Й
        logs_dir = Path(config.get("paths.logs_dir", "logs"))
        logs_dir.mkdir(exist_ok=True)
        filepath = logs_dir / filename

        # ф┐ЭхнШ
        save_json_file(formatted, str(filepath))

        return str(filepath)


# ==================================================
# APIуВпуГйуВдуВвуГ│уГИ
# ==================================================
class AnthropicClient:
    """Anthropic API уВпуГйуВдуВвуГ│уГИ"""

    def __init__(self, api_key: str = None):
        if api_key is None:
            api_key = config.get("api.anthropic_api_key") or os.getenv("ANTHROPIC_API_KEY")

        if not api_key:
            # уВиуГйуГ╝уГбуГГуВ╗уГ╝уВ╕уВТхдЪшиАшкЮхп╛х┐Ь
            lang = config.get("i18n.default_language", "ja")
            error_msg = config.get(f"error_messages.{lang}.api_key_missing",
                                   "Anthropic APIуВнуГ╝уБМшинхоЪуБХуВМуБжуБДуБ╛уБЫуВУ")
            raise ValueError(error_msg)

        self.client = Anthropic(api_key=api_key)

    @error_handler
    @timer
    def create_message(
            self,
            messages: List[MessageParam] = None,
            *,
            model: str = None,
            system: str = None,
            max_tokens: int = 4096,
            **kwargs,
    ) -> Message:
        """Anthropic Messages APIхС╝уБ│хЗ║уБЧ"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        if messages is None:
            raise ValueError("messages must be provided")

        params = {
            "model": model,
            "messages": messages,
            "max_tokens": max_tokens,
        }
        
        if system:
            params["system"] = system
            
        params.update(kwargs)

        return self.client.messages.create(**params)

    @error_handler
    @timer
    def create_message_with_tools(
            self,
            messages: List[MessageParam] = None,
            *,
            model: str = None,
            system: str = None,
            max_tokens: int = 4096,
            tools: List[Dict] = None,
            **kwargs,
    ) -> Message:
        """Anthropic Messages APIхС╝уБ│хЗ║уБЧя╝ИуГДуГ╝уГлф╜┐чФихп╛х┐Ья╝Й"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        if messages is None:
            raise ValueError("messages must be provided")

        params = {
            "model": model,
            "messages": messages,
            "max_tokens": max_tokens,
        }
        
        if system:
            params["system"] = system
            
        if tools:
            params["tools"] = tools
            
        params.update(kwargs)

        return self.client.messages.create(**params)

    @error_handler
    @timer
    def create_message_stream(
            self,
            messages: List[MessageParam] = None,
            *,
            model: str = None,
            system: str = None,
            max_tokens: int = 4096,
            **kwargs,
    ):
        """Anthropic Messages APIхС╝уБ│хЗ║уБЧя╝ИуВ╣уГИуГкуГ╝уГЯуГ│уВ░я╝Й"""
        if model is None:
            model = config.get("models.default", "claude-sonnet-4-20250514")

        if messages is None:
            raise ValueError("messages must be provided")

        params = {
            "model": model,
            "messages": messages,
            "max_tokens": max_tokens,
            "stream": True,
        }
        
        if system:
            params["system"] = system
            
        params.update(kwargs)

        return self.client.messages.create(**params)


# ==================================================
# уГжуГ╝уГЖуВгуГкуГЖуВгщЦвцХ░
# ==================================================
def sanitize_key(name: str) -> str:
    """уВнуГ╝чФиуБлхоЙхЕиуБкцЦЗхнЧхИЧуБ╕хдЙцПЫ"""
    return re.sub(r'[^0-9a-zA-Z_]', '_', name).lower()


def load_json_file(filepath: str) -> Optional[Dict[str, Any]]:
    """JSONуГХуВбуВдуГлуБошкнуБ┐ш╛╝уБ┐"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"JSONуГХуВбуВдуГлшкнуБ┐ш╛╝уБ┐уВиуГйуГ╝: {e}")
        return None


def save_json_file(data: Dict[str, Any], filepath: str) -> bool:
    """JSONуГХуВбуВдуГлуБоф┐ЭхнШ"""
    try:
        Path(filepath).parent.mkdir(parents=True, exist_ok=True)

        # хоЙхЕиуБкJSONф┐ЭхнШуВТф╜┐чФи
        json_str = safe_json_dumps(data)
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(json_str)
        return True
    except Exception as e:
        logger.error(f"JSONуГХуВбуВдуГлф┐ЭхнШуВиуГйуГ╝: {e}")
        return False


def format_timestamp(timestamp: Union[int, float, str] = None) -> str:
    """уВ┐уВдуГауВ╣уВ┐уГ│уГЧуБоуГХуВйуГ╝уГЮуГГуГИ"""
    if timestamp is None:
        timestamp = time.time()

    if isinstance(timestamp, str):
        return timestamp

    return datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")


def create_session_id() -> str:
    """уВ╗уГГуВ╖уГзуГ│IDуБочФЯцИР"""
    return hashlib.md5(f"{time.time()}_{id(object())}".encode()).hexdigest()[:8]


# ==================================================
# уВиуВпуВ╣уГЭуГ╝уГИя╝ИщЗНшдЗхоЪцХ░уВТхЙКщЩдя╝Й
# ==================================================
__all__ = [
    # хЮЛхоЪч╛й
    'RoleType',

    # уВпуГйуВ╣
    'ConfigManager',
    'MessageManager',
    'TokenManager',
    'ResponseProcessor',
    'AnthropicClient',
    'MemoryCache',

    # уГЗуВ│уГмуГ╝уВ┐
    'error_handler',
    'timer',
    'cache_result',

    # уГжуГ╝уГЖуВгуГкуГЖуВг
    'sanitize_key',
    'load_json_file',
    'save_json_file',
    'format_timestamp',
    'create_session_id',
    'safe_json_serializer',
    'safe_json_dumps',

    # уГЗуГХуВйуГлуГИуГбуГГуВ╗уГ╝уВ╕щЦвцХ░
    'get_default_messages',
    'get_system_prompt',
    'append_user_message',
    'append_assistant_message',

    # уВ░уГнуГ╝уГРуГл
    'config',
    'logger',
    'cache',
]
